----- Harmonia de cores -----

--> Circulo cromático
-- Utilizado para harmizar cores

-> Cores primárias:
- Amarelo
- Azul
- Vermelho

-> Cores secundárias:
- Verde
- Violeta
- Laranja

-> Cores terciárias:
- Está sempre entre a cor primária e secúndaria
- No nome, deve ser sempre primeiro o nome da cor primária e depois da secundárias.
- Exemplo de cores:
- Amarelo-esverdeado
- Amarelo-alaranjado
- Vermelho-alaranjado
- Vermelho-aroxeado
- Azul-aroxeado
- Azul-esverdeado

-> Separação por temperatura de cores:
- Cores com tons para o lado amarelo, laranja e vermelho -> cores quentes 
- Cores con tons para o lado azul, verde e violeta -> cores frias

-> Cores complementares - cor que mais contrasta:
- Para saber cor que mais contrasta com outra cor é só traçar uma reta no círculo cromático
- Ex: Violeta e amarelo; Vermelho e verde; Azul e laranja

-> Cores análogas - cores similares:
- Para saber as cores análogas a cor escolhida, é só pegar as cores vizinhas no círculo cromático
- Ex: Violeta -> roxo e azul-aroxeado

*Para criar uma paleta, podemos utilizar uma mistura entre cores análogas e uma cor complementar

-> Cores análogas realcionadas:
- Pega duas cores vizinhas do circulo cromático, pula uma e pega a próxima
- ex: Amarelo, amarelo-alaranjado, (pula o laranja), vermelho-alaranjado

-> Cores intercaladas:
- Pega uma cor, pula uma vizinha e pega a próxima
- Ex: Amarelo, (pula amarelo-alaranjado), laranja, (pula vermelho-alaranjado), vermelho

- Cores triadicas:
- Pula de três em três cores (ex: cores primárias)

- Cores quadrados:
- Pula de duas em duas cores (ex: cores primárias)

- Monocromia:
- Pega uma cor e altera a satuação e luminosidade dela

SITE ADOBE PARA CRIAR PALETA DE CORES:
https://color.adobe.com/pt/create/color-wheel

SITE PARA VER COMO SITE FICA:
https://paletton.com/

---- IMAGENS SEM COPYRIGHT  ----
https://unsplash.com/
https://www.pexels.com/pt-br/

---- TIPOGRAFIA ----
Serifa - pequeno traço gerado em algumas fontes

Categorias de fontes:
Serifadas - possui serifas
Sans-serif - não possui serifas
Monoespaçada - todas as letras tem a mesma largura
Handwriting/Scriptada -  simula a calegrafia humana, feito a mão
Display - não segue as regras padrões das fontes, são fontes comemorativas

Combinações seguras para fontes:
https://www.w3schools.com/css/css_font_pairings.asp

font-weight: 400; - > peso da fonte (bold, lighter, normal)
font-style: italic; -> estilo da fonte
text-decoration: underline; -> decoração fonte

Importar fontes - Google fonts

Tipos de formatos:
- opentype (otf)
- truetype (ttf)
- embeded-opentype
- truetype-aat (Apple Advanced Typography)
- svg

PLUGIN PARA PEGAR FONTES DE TEXTO:
https://chromewebstore.google.com/detail/fonts-ninja/eljapbgkmlngdpckoiiibecpemleclhh?hl=pt-BR


MODEL BOX:
altura - height
largura - width
border - borda (dentro do elemento)
padding - preenchimento entre borda e conteudo
margin - espaçamento externo
outline - contorno fora do elemento

box-level:
- sempre se inicia em uma linha nova (quebra linha)
- ocupa a linha toda
- ex: div, h1-h6, p, main, header, etc...

inline-level:
- inicia na mesma linha do box anterior
- não ocupa a linha toda
- ex: span, a, code, small, em, label, button, etc...

user agent - navegador que exibe o site

margin: auto; -> centralizar box

LINK -> http://www.notte.com.br/

MOCKFLOW (Para construir layout do site) -> https://mockflow.com/

***Tornando vídeo responsivo:
1- Envelopar o iframe dentro de uma div e criar uma class
2- No CSS, colocar a div com 'positional: relative' e o iframe como 'positional: absolute'
3- Para centralizar o vídeo, criar um padding-bottom (no exemplo 56.25%);
4- No Iframe, adicionar top e left (no exemplo top: 2,5% e left 5%) e o width e height (no exemplo width 90% e 95%)

background-size configs:
- cover (a imagem ocupa a tela toda, mas dependendo do tamanho, ela fica cortada)
- contain (a imagem se adapta a resolução da tela, mas pode não ocupar todo o espaço)
- auto (comportamento padrão, imagem aparece com a resolução padrão dela no background)

background-attachment: fixed; -> fixa a imagem de fundo na tela, fazendo que quando exista rolagem de tela, a imagem permaneça estática no fundo

ALINHAMENTO VERTICAL:
No alinhamento vertical, sempre precisamos ter um container e um conteudo. O conteudo, que é o que queremos alinhar verticalmente, é o que desejamos alinhar e ele precisa estar dentro do container, por exemplo, uma div com a classe content dentro de uma div com a classe container. 

A div container precisa ter o position como relative (padrão) e a div content precisa ter o position como absolute.

Após definir o content como absolute, podemos mexer em alguns atributos dele, como o top e o left. O atributo top irá definir quanto da parte vertical o conteúdo irá se locomover e o left, a parte horizontal (normalmente é utilizado % para definir os valores)

Ex de centralização: 

top: 50%;
left: 50%;

Porém, ao realizar isso, o content irá centralizar, mas utilizando como base a ponta esquerda superior da box do content. Para resolver isso utilizamos a propriedade transform: translate().

Ex:

transform: translate(-50%, -50%);

Essa funcionalidade do transform: translate faz com que o content se mova também verticalmente e horizontal, fazendo com que seja possível ajustar o centro do content com o centro do container.

TABELAS:

/* alinhamento horizontal: left center right */
text-align: center;
/* alinhamento vertical: top middle bottom */
vertical-align: middle;

/* border-collapse para tirar os espaços entre os td */
border-collapse: collapse;

ANATOMIA PARA TABELAS
    CAPTION
    THEAD
        TR, TD, TH
    TBODY
        TR, TD, TH
    TFOOT
        TR, TD, TH

colspan -> para expandir/mesclar cédula na coluna
rowspan -> para expandir/mesclar cédula na linha

/* Deixar tabela responsiva */
Envelopar a table em uma div e aplicar a seguinte configuração nessa div:

.container {
    overflow-x: auto;
}

----- IFRAMES ------
Tamanho padrão: 300x150 pixels


---- FORMULÁRIOS ----
- autocomplete="off" para que não apareça sugestões nos campos do forms
- diferença entre name e id -> name mais utilizado para html e php e id para javascript
- UTILIZAR LABEL PARA LIGAR TEXTO AO INPUT

-- Metodos de envio do formulário
- GET: máximo de 3000 bytes pode ser enviado, dados aparecem na URL
- POST: mais recomendado para campos sensíveis e imagens, dados não aparecem na URL, mas ainda da para localizar (preciso usar HTTPS)

-- Atributos para os inputs:
- required -> torna o preenchimento do input obrigatório
- minlength/maxlength -> adiciona um mínimo ou máximo de caracteres que pode ser preenchido
- placeholde -> colocar texto de dica no campo do input
- autocomplete -> no input, o autocomplete pode ter vários valores, que representam senha, nome, usuário e outras infomrações (para funcionar precisa estar com o autocomplete do form como on)
- pattern -> possibilita adicionar regex para filtrar melhor o input

É possível agrupar inputs com a tag fieldset, adicionando tbm uma legenda com legend

Sobre as tags RADIO e CHECKBOX
- para que as tags radio funcionem corretamente, elas precisam possuir o mesmo name

Input FILE ***IMPORTANTE***
- quando for enviar algum arquivo pelo formulário utilizando o input file, é preciso utilizar o metódo post, pois com o metodo get gera erro. (textarea também funciona melhor com o método post)


------------------------ FLEXBOX MODEL --------------------------
--- CONFIGURAÇÕES CONTAINER ---
-- FLEX-DIRECTION
- flex-direction: row; (PADRÃO, em linha, da esquerda para direita)
-outras opções:
- flex-direction: row-reverse; (em linha, da direita para a esquerda)
- flex-direction: column; (em coluna, de cima para baixo)
- flex-direction: column-reverse; (em coluna, de baixo para cima)

***IMPORTANTE***
-- EIXOS:
Quando a flex-direction é ROW:
- main-axis (horizontal): a ponta esquerda é o main-start e a direita o main-end
- cross-axis (vertical): o topo é o cross-start e o final o cross-end

Quando a flex-direction é ROW-REVERSE:
- main-axis (horizontal): a ponta direita é o main-start e a esquerda o main-end
- cross-axis (vertical): o topo é o cross-start e o final o cross-end

Quando a flex-direction é COLUMN:
- main-axis (vertical): o topo é o main-start e o final o main-end
- cross-axis (horizontal): a ponta esquerda é o cross-start e a direita o cross-end

Quando a flex-direction é COLUMN-REVERSE:
- main-axis (vertical): o final é o main-start e o topo o main-end
- cross-axis (horizontal): a ponta esquerda é o cross-start e a direita o cross-end

-- FLEX-WRAP --
- flex-wrap: nowrap; (comportamento padrão, onde quando o container encolhe, os itens dentro dele encolhem juntos)
- flex-wrap: wrap; (quando diminuir o container até chegar no limite do tamanho dos itens, os itens quebram na direção do cross-axis)
- flex-wrap: wrap-reverse; (quando diminuir o container até chegar no limite do tamanho dos itens, os itens quebram na direção contrária do cross-axis)

DICA IMPORTANTE:
Utilizar o SHORTHAND flex-flow para declarar o flex-wrap e o flex-direction. Ex:
flex-flow: row nowrap;
flex-flow: column wrap;

----- JUSTIFY-CONTENT ----- 
**IMPORTANTE: alinha em relação ao main-axis
- justify-content: flex-start; (padrão, primeiro item começa no main-start e os outros itens ficam colados nele, jogando o espaço em branco em direção ao main-end)
- justify-content: flex-end; (primeiro item começa no main-end e os outros itens ficam colados nele, jogando o espaço em branco em direção ao main-start)
- justify-content: center; (itens ficam centralizados entre o main-start e o main-end, com os itens colados)
- justify-content: space-between; (primeiro item fica no main-start e ultimo item no main-end, colocando os outros itens entre eles com um espaçamento igual entre todos)
- justify-content: space-evenly; (todos os itens ficam com um espaçamento igual entre eles, inclusive o primeiro e o ultimo do main-start e main-end)
- justify-content: space-around; (separa a area do container pela quantidade de itens, e centraliza cada item em uma area separada)

----- ALIGN-ITENS ----- 
**IMPORTANTE: alinha em relação ao cross-axis
- align-itens: stretch; (padrão, estica os elementos no sentido do cross-axis)
- align-itens: flex-start; (padrão, primeiro item começa no cros-start e os outros itens ficam colados nele, jogando o espaço em branco em direção ao cross-end)
- align-itens: flex-end; (primeiro item começa no cros-end e os outros itens ficam colados nele, jogando o espaço em branco em direção ao cross-start)
- align-itens: center; (itens ficam centralizados entre o cross-start e o cross-end, com os itens colados)


--- FLEX nos ITENS ---
/* flex-grow faz com que os elementos crescam e ocupem os espaços que iriam sobrar no aumento da tela */
/* flex-grow: 1; */
/* medida inicial do elemento na direção main-axis */
/* flex-basis: 320px; */
/* permite que o elemento diminua o seu tamanho para não causar overflow */
/* flex-shrink: 1; */
/* SHOTHAND FLEX */
/* grow shrink basis */
/* flex: 1 1 320px; */

align-self -> um align que pode ser inserido diretamente em um item/elemento, sem influenciar diretamente nos outros itens do container